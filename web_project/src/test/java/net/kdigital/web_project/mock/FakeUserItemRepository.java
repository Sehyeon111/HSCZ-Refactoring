package net.kdigital.web_project.mock;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import net.kdigital.web_project.user.domain.User;
import net.kdigital.web_project.userItem.domain.UserItem;
import net.kdigital.web_project.userItem.service.port.UserItemRepository;

public class FakeUserItemRepository implements UserItemRepository {

    private List<UserItem> data = new ArrayList<>();
    private AtomicLong autoGeneratedLong = new AtomicLong(0);

    @Override
    public void save(UserItem userItem, User user) {
        if (userItem.getItemId() == null || userItem.getItemId() == 0) {
            UserItem newUserItem = UserItem.builder()
                    .itemId(autoGeneratedLong.incrementAndGet())
                    .userId(user.getUserId())
                    .firstItem(userItem.getFirstItem())
                    .secondItem(userItem.getSecondItem())
                    .thirdItem(userItem.getThirdItem())
                    .build();
            data.add(newUserItem);
        } else {
            data.removeIf(item -> Objects.equals(item.getItemId(), userItem.getItemId()));
            data.add(userItem);
        }

    }

    @Override
    public Optional<UserItem> findByUser(User user) {
        return data.stream().filter(item -> item.getUserId().equals(user.getUserId())).findAny();
    }
}
