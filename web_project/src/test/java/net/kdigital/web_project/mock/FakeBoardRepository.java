package net.kdigital.web_project.mock;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

import org.hibernate.mapping.Collection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;

import net.kdigital.web_project.board.domain.Board;
import net.kdigital.web_project.board.infrastructure.BoardEntity;
import net.kdigital.web_project.board.service.port.BoardRepository;

public class FakeBoardRepository implements BoardRepository {

    List<Board> data = new ArrayList<>();
    AtomicLong autoGeneratedLong = new AtomicLong(0);

    @Override
    public Page<Board> findAllByProductCategory(String searchItem, String searchWord, PageRequest of) {

    }

    @Override
    public void save(Board board) {
        if (board.getConsultNum() == null || board.getConsultNum() == 0) {
            data.add(Board.builder()
                    .consultNum(autoGeneratedLong.incrementAndGet())
                    .consultWriter(board.getConsultWriter())
                    .consultTitle(board.getConsultTitle())
                    .consultContent(board.getConsultContent())
                    .consultDate(board.getConsultDate())
                    .productCategory(board.getProductCategory())
                    .productHscode(board.getProductHscode())
                    .build());
        } else {
            data.removeIf(item -> Objects.equals(item.getConsultNum(), board.getConsultNum()));
            data.add(board);
        }
    }

    @Override
    public void deleteById(Long consultNum) {
        data.removeIf(item -> Objects.equals(item.getConsultNum(), consultNum));
    }

    @Override
    public List<Board> findAllByConsultWriterOrderByConsultNumDesc(String userName) {
        List<Board> newList = data.stream().filter(item -> item.getConsultWriter().equals(userName))
                .collect(Collectors.toList());
        Collections.sort(newList, (o1, o2) -> Long.compare(o2.getConsultNum(), o1.getConsultNum()));
        return newList;
    }

    @Override
    public Optional<Board> findById(Long consultNum) {
        return data.stream().filter(item -> Objects.equals(item.getConsultNum(), consultNum)).findAny();
    }

    @Override
    public Page<Board> findAll(PageRequest of) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'findAll'");
    }

}
